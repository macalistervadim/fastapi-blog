stages:
  - build
  - test
  - deploy

variables:
  DOCKER_IMAGE: $DOCKER_USERNAME/fastapi-blog:$CI_COMMIT_SHORT_SHA
  POSTGRES_DB: test_db
  POSTGRES_USER: test_user
  POSTGRES_PASSWORD: test_password
  DATABASE_URL: postgresql://test_user:test_password@postgres:5432/test_db

services:
  - docker:dind
  - postgres:17-alpine

build:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  script:
    - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
    - docker build -t $DOCKER_IMAGE .
    - docker push $DOCKER_IMAGE
  only:
    - prod
    - dev
    - merge_requests
    - /^fix\/.*$/
    - /^feat\/.*$/

test:
  stage: test
  image: $DOCKER_IMAGE
  services:
    - postgres:17-alpine
  variables:
    POSTGRES_DB: test_db
    POSTGRES_USER: test_user
    POSTGRES_PASSWORD: test_password
    DATABASE_URL: postgresql://test_user:test_password@postgres:5432/test_db
  script:
    - pytest --maxfail=1 --disable-warnings -q
  only:
    - prod
    - dev
    - merge_requests
    - /^fix\/.*$/
    - /^feat\/.*$/

deploy:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - echo "StrictHostKeyChecking no" >> ~/.ssh/config
  script:
    - ssh $SSH_USER@$SSH_HOST "
        cd ~/fastapi-app/fastapi-blog &&
        git pull &&
        export DOCKER_IMAGE=$DOCKER_IMAGE &&
        export DATABASE_URL=$DATABASE_URL &&
        docker-compose -f docker-compose.prod.yml pull &&
        docker-compose -f docker-compose.prod.yml down &&
        docker-compose -f docker-compose.prod.yml up -d
      "
  only:
    - dev
    - prod